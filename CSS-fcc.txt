CSS Topics covered in FCC

*******************BASIC CSS********************

selectors
  h1{
  }
  .class-name{
  }
  #id-name{
  }
  [attribute_name:'attribute_value']{
  }
  
color: red;
background-color:silver;
width:XXpx;
font-size: 16px;
font-family: FAMILY_NAME, GENERIC_NAME;
font-family: Lobster, monospace;

  In addition to specifying common fonts that are found on most operating systems, we can also specify non-standard, custom web fonts for use on our website. 
  There are many sources for web fonts on the Internet. 
  For this example we will focus on the Google Fonts library.

  Family names are case-sensitive and need to be wrapped in quotes if there is a space in the name. 
  For example, you need quotes to use the "Open Sans" font, but not to use the Lobster font.
  Generic font family names are not case-sensitive. Also, they do not need quotes because they are CSS keywords.
  
border-color:red;
border-style:solid;
border-width:10px;
border-radius:5px; 
border-radius:50%; /* obtains a circle */
border: 5px solid red;/* border: WIDTH STYLE COLOR;
margin:10px;
padding:10px;
/*margin pushes other elements, negaive margin pulls surrounding elements or we can say, the element becomes larger*/
padding:40px 0 20px 0;
padding-top:40px;
padding-right:0;
padding-bottom:20px;
padding-left:0;
margin:40px 0 20px 0;
margin-top:40px;
margin-right:0;
margin-bottom:20px;
margin-left:0;  

color - colorName / #hexadecimalValue / rgb(0,0,0)

CSS Variables
--variable-name:value;
property-name:var(--variable-name,fallback-value);/*referencing a CSS variable*/
You can also provide a browser fallback by putting an extra declaration before in a way that the older browsers can understand
:root 
  is a pseudo-class selector that matches the root element of the document, usually the html element. 
  By creating your variables in :root, they will be available globally and can be accessed from any other selector in the style sheet.
CSS Variables can simplify the way you use media queries.
  @media (max-width: 350px) {
    :root {
      /* These changes applied when width is 0px to 350px i.e. when max-width = 350px */
      --penguin-size:200px;
      --penguin-skin:black;
      
    }
  }

*************APPLIED VISUAL DESIGN*************************

text-align:center;
text-align:justify;
text-align:right;
text-align:left;/*default*/
width:25px;
height:20px;

<strong> 
  tag adds font-weight:bold; CSS rule to the text it encloses to represent important text
<em> 
  tag adds font-style:italic; CSS rule to the text it encloses to emphasize text.
<u> 
  tag adds text-decoration:underline; CSS rule to the text it encloses to represent important text.
  By default <a> tag adds an underline to hypertexts. So to avoid that use CSS rule- text-decoration:none;
<s>
  tag adds text-decoration:line-through; CSS rule to the text it encloses to strike the text.
<hr>
 horizantal line across the width of the containing element

background-color:rgba(45,45,45,01)/*1 means opaque or solid and 0 means 100%transparent or clear*/
font-size:27px;
box-shadow:offset-x offset-y blur-radius spread-radius color
  blur-radius and spread-radius values are optional
  Multiple values for a single box-shadow property can be given by separating with comma
opacity:0.7;/*note values is between 0 and 1 inclusive of both and doesn't contain a unit like px*/
text-transform: uppercase;/*other values- lowercase capitalize initial none inherit */
font-size: 54px;
font-weight: 500;/*don't add px */
font-weight: bold;
line-height: 23px;/*space between two lines of text*/

pseudo-classes

a:visited{
}
a:link{
}
a:hover{
}


position: relative;/*relative to its original position*/
top: 15px;/*moves 15px away i.e. towards bottom*/
bottom: 15px/*moves 15px away i.e. towards top*/
position:absolute;/*relative to the CLOSEST POSITION PARENT i.e. parent should have position: relative CSS rule. else no parent then body tag is the default parent*/
position: fixed;/*relative to the window*/


float:right;
width:50%;
float:left;
width:40%

z-index:1;/*a whole number, higher value overlaps rest*/

display:block/*changes an inline element to block*/
margin:auto/*to center a block element horizontally*/


















