CSS Topics covered in FreeCodeCamp

*******************BASIC CSS********************

selectors
  h1{
  }
  .class-name{
  }
  #id-name{
  }
  [attribute_name:'attribute_value']{
  }
  
color: red;
background-color:silver;
width:XXpx;
font-size: 16px;
font-family: FAMILY_NAME, GENERIC_NAME;
font-family: Lobster, monospace;

  In addition to specifying common fonts that are found on most operating systems, we can also specify non-standard, custom web fonts for use on our website. 
  There are many sources for web fonts on the Internet. 
  For this example we will focus on the Google Fonts library.

  Family names are case-sensitive and need to be wrapped in quotes if there is a space in the name. 
  For example, you need quotes to use the "Open Sans" font, but not to use the Lobster font.
  Generic font family names are not case-sensitive. Also, they do not need quotes because they are CSS keywords.
  
border-color:red;
border-style:solid;
border-width:10px;
border-radius:5px; 
border-radius:50%; /* obtains a circle */
border: 5px solid red;/* border: WIDTH STYLE COLOR;
margin:10px;
padding:10px;
/*margin pushes other elements, negaive margin pulls surrounding elements or we can say, the element becomes larger*/
padding:40px 0 20px 0;
padding-top:40px;
padding-right:0;
padding-bottom:20px;
padding-left:0;
margin:40px 0 20px 0;
margin-top:40px;
margin-right:0;
margin-bottom:20px;
margin-left:0;  
Important: When you set the width and height properties of an element with CSS, you just set the width and height of the content area. To calculate the full size of an element, you must also add padding, borders and margins.

color - colorName / #hexadecimalValue / rgb(0,0,0) /hsl(#,%,%)

CSS Variables
--variable-name:value;
property-name:var(--variable-name,fallback-value);/*referencing a CSS variable*/
You can also provide a browser fallback by putting an extra declaration before in a way that the older browsers can understand
:root 
  is a pseudo-class selector that matches the root element of the document, usually the html element. 
  By creating your variables in :root, they will be available globally and can be accessed from any other selector in the style sheet.
CSS Variables can simplify the way you use media queries.
  @media (max-width: 350px) {
    :root {
      /* These changes applied when width is 0px to 350px i.e. when max-width = 350px */
      --penguin-size:200px;
      --penguin-skin:black;
      
    }
  }

*************APPLIED VISUAL DESIGN*************************

text-align:center;
text-align:justify;
text-align:right;
text-align:left;/*default*/
width:25px;
height:20px;

<strong> 
  tag adds font-weight:bold; CSS rule to the text it encloses to represent important text
<em> 
  tag adds font-style:italic; CSS rule to the text it encloses to emphasize text.
<u> 
  tag adds text-decoration:underline; CSS rule to the text it encloses to represent important text.
  By default <a> tag adds an underline to hypertexts. So to avoid that use CSS rule- text-decoration:none;
<s>
  tag adds text-decoration:line-through; CSS rule to the text it encloses to strike the text.
<hr>
 horizantal line across the width of the containing element

background-color:rgba(45,45,45,01)/*1 means opaque or solid and 0 means 100%transparent or clear*/
font-size:27px;
box-shadow:offset-x offset-y blur-radius spread-radius color
  blur-radius and spread-radius values are optional
  Multiple values for a single box-shadow property can be given by separating with comma
opacity:0.7;/*note values is between 0 and 1 inclusive of both and doesn't contain a unit like px. 1 means opaque or solid and 0 means 100%transparent or clear*/
text-transform: uppercase;/*other values- lowercase capitalize initial none inherit */
font-size: 54px;
font-weight: 500;/*don't add px */
font-weight: bold;
line-height: 23px;/*space between two lines of text*/

pseudo-classes

a:visited{
}
a:link{
}
a:hover{
}


position: relative;/*relative to its original position*/
top: 15px;/*moves 15px away i.e. towards bottom*/
bottom: 15px/*moves 15px away i.e. towards top*/
position:absolute;/*relative to the CLOSEST POSITION PARENT i.e. parent should have position: relative CSS rule. else no parent then body tag is the default parent*/
position: fixed;/*relative to the window*/

position: absolute;
  height: 50px;
  width: 70px;
  top: -50px;/* 50px above the top of the element.*/
  left: 5px;/* 5px from the left*/
  
float:right;
width:50%;
float:left;
width:40%

z-index:1;/*a whole number, higher value overlaps rest*/

display:block/*changes an element to block*/
display:inline-block/*changes to inline and can change width and height*/
margin:auto/*to center a block element horizontally*/

All elements have a default background-color of transparent. 
background-color: hsl(180,80%,25%)
background-color: rgb(204, 204, 255)

background: linear-gradient(gradient_direction, color 1, color 2, color 3, ...);
  The first argument specifies the direction from which color transition starts - 
  it can be stated as a degree, where 90deg makes a horizontal gradient (from left to right) 
  and 45deg makes a diagonal gradient (from bottom left to top right). 
  The following arguments specify the order of colors used in the gradient.  
background:repeating-linear-gradient(90deg, yellow 0px, yellow 40px, black 40px, black 80px;
background: url(https://cdn-media-1.freecodecamp.org/imgr/MJAkxbh.png);

transform: scale(1.5);
div:hover {
  transform: scale(2.1);
}
  Applying a transform to a div element will also affect any child elements contained in the div.
transform: skewX(24deg);/*+for skewing towards right , - towards left*/
transform: skewY(-10deg);/*+for skewing left vertical side and - for skewing right vertical side*/
transform: rotate(-45deg);/*- is anti-clockwise and +deg is clockwise direction rotation*/
transform: scale(1) rotate(-45deg);

background-color: transparent;
border-radius: 50%;
box-shadow: 25px 10px 0 0 blue;

::before creates a pseudo-element that is the first child of the selected element; ::after creates a pseudo-element that is the last child of the selected element.
For the ::before and ::after pseudo-elements to function properly, they must have a defined content property. 
  This property is usually used to add things like a photo or text to the selected element. When the ::before and ::after pseudo-elements are used to make shapes, 
  the content property is still required, but it's set to an empty string. 
  
.heart::before {
  content: "";
  background-color: yellow;
  border-radius: 25%;
  position: absolute;
  height: 50px;
  width: 70px;
  top: -50px;
  left: 5px;
}

#rect {
    animation-name: rainbow;
    animation-duration: 4s;

  }

  @keyframes rainbow{
    0%{
      background-color: blue;
    }
    50%{
      background-color: green;
    }
    100%{
      background-color: yellow;
    }
  }
  
 another eg.

img {
    width: 30px;
  }
  img:hover {
    animation-name: width;
    animation-duration: 500ms;
  }

  @keyframes width {
    100% {
      width: 40px;
    }
  }
  
The animation-fill-mode specifies the style applied to an element when the animation has finished. You can set it like so:
animation-fill-mode: forwards;


@keyframes rainbow {
  0% {
    background-color: blue;
    top: 0px;
  }
  50% {
    background-color: green;
    top: 50px;
  }
  100% {
    background-color: yellow;
    top: 0px;
  }
}

animation-iteration-count: infinite;
animation-timing-function: linear;
  There are a number of predefined keywords available for popular options. For example, 
  the default value is ease, which starts slow, speeds up in the middle, and then slows down again in the end. 
  Other options include ease-out, which is quick in the beginning then slows down, ease-in, which is slow in the beginning,
  then speeds up at the end, or linear, which applies a constant animation speed throughout.
animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);
animation-timing-function: cubic-bezier(0, 0, 0.58, 1);
  Remember that all cubic-bezier functions start with p0 at (0, 0) and end with p3 at (1, 1). In this example, 
  the curve moves faster through the Y-axis (starts at 0, goes to p1 y value of 0, then goes to p2 y value of 1) 
  than it moves through the X-axis (0 to start, then 0 for p1, up to 0.58 for p2). As a result, the change in the
  animated element progresses faster than the time of the animation for that segment. Towards the end of the curve,
  the relationship between the change in x and y values reverses - the y value moves from 1 to 1 (no change), and 
  the x values move from 0.58 to 1, making the animation changes progress slower compared to the animation duration.
  
cubic-bezier(0.3, 0.4, 0.5, 1.6);
  Notice that the value of y2 is larger than 1. Although the cubic Bezier curve is mapped on a 1 by 1 coordinate system, 
  and it can only accept x values from 0 to 1, the y value can be set to numbers larger than one. This results in a bouncing
  movement that is ideal for simulating the juggling ball.

************************APPLIED ACCESSIBILITY******************

use alt attribute in img elements.
use h1 to h6 tags to go in order and indicate the hierarchical relationships of your content.use only one h1 in one html page.
main, header, footer, nav, article, and section
  only one main tag per page
  Note: The section element is also new with HTML5, and has a slightly different semantic meaning than article. 
  An article is for standalone content, and a section is for grouping thematically related content. 
  They can be used within each other, as needed. For example, if a book is the article, then each chapter is a section. 
  When there's no relationship between groups of content, then use a div.
  
<audio id="meowClip" controls>
  <source src="audio/meow.mp3" type="audio/mpeg">
  <source src="audio/meow.ogg" type="audio/ogg">
</audio>
  Audio content also needs a text alternative to be accessible to people who are deaf or hard of hearing. 
  This can be done with nearby text on the page or a link to a transcript.

<figure>
<img src="image.jpeg" alt="an image">
<br>
<figcaption>An image to expalin how a figure tag and figcaption tag within that works</figcaption>
</figure>
  
The for attribute on a label tag explicitly associates that label with the form control and is used by screen readers.
for radio buttons- 
    <fieldset>
    <legend>Choose one of these three items:</legend>
    </fieldset>
    
<time datetime="2013-02-13">last Wednesday</time>
use brief but descriptive text within the a tags to provide more meaning   
<button accesskey="b">Important Button</button>   
<div tabindex="0">I need keyboard focus!</div>   using tabindex also enables the CSS pseudo-class :focus to work on that tag.
    
**********************MEDIA QUERIES**********************************
@media (max-height: 800px){
    p{
      font-size:10px;
    }
  }
  
The max-width of 100% will make sure the image is never wider than the container it is in, and the height of auto will make the image keep its original aspect ratio.

img{
  max-width: 100%;
  height: auto;
}

changing the height and width of an image that may appear pixaleted on a high resolution screen, to half the original height and width increases image quality.


viewport units - relative to the the dimensions i.e. height and width of the viewport
The four different viewport units are:

  vw (viewport width): 10vw would be 10% of the viewport's width.
  vh (viewport height): 3vh would be 3% of the viewport's height.
  vmin (viewport minimum): 70vmin would be 70% of the viewport's smaller dimension (height or width).
  vmax (viewport maximum): 100vmax would be 100% of the viewport's bigger dimension (height or width).
    
h2{
    width: 80vw;
  }
  p{
    width: 75vmin;
  }
  
*********************************FLEXBOX********************************************************
    
 display:flex;
 flex-direction: row/*default*/
               : column;
               : row-reverse;
               : column-reverse;
 justify-content: flex-start/*default*/
                : flex-end;
                : center;
                : space-between;
                : space-around;
                : space-evenly;
                
    
    
    
    
    
